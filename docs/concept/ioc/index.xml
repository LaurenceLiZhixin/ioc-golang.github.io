<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IOC-golang – IOC-控制反转</title><link>/docs/concept/ioc/</link><description>Recent content in IOC-控制反转 on IOC-golang</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/concept/ioc/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 依赖注入</title><link>/docs/concept/ioc/di/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>/docs/concept/ioc/di/</guid><description>
&lt;h3 id="概念">概念&lt;/h3>
&lt;p>&lt;strong>依赖注入&lt;/strong>(Dependency Injection，DI) 是指开发人员无需显式地创建对象，而是通过特定标注（在本框架中为 &lt;a href="/docs/reference/tag_format">标签&lt;/a> ）的方式声明字段，由框架在对象加载阶段，将实例化对象注入该字段，以供后续使用。&lt;/p>
&lt;h3 id="优点">优点&lt;/h3>
&lt;p>依赖注入可以降低代码的耦合度，减少冗余代码量，优化代码逻辑，使得开发人员可以只关心业务逻辑，帮助面向对象编程，面向接口编程。&lt;/p>
&lt;h3 id="ioc-golang-的依赖注入能力">IOC-golang 的依赖注入能力&lt;/h3>
&lt;p>本框架从两个角度实现依赖注入：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>结构如何被提供&lt;/p>
&lt;p>开发人员需要准备好需要被注入的结构，将它注册到框架。注册到框架的代码可以由开发人员手动编写，开发人员也可以通过使用&lt;a href="../annotation">注解&lt;/a>标记结构，使用 &lt;a href="http://localhost:1313/cn/docs/reference/iocli/#%E7%BB%93%E6%9E%84%E6%B3%A8%E8%A7%A3%E4%B8%8Esdcndocsconceptsd%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">iocli&lt;/a> 的代码生成能力自动生成注册代码，从而减少工作量。&lt;/p>
&lt;p>一个带有 &lt;a href="../annotation">注解&lt;/a> 的结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// +ioc:autowire=true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// +ioc:autowire:type=singleton
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">App&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由 iocli 工具生成，或用户手动编写的注册代码。摘自&lt;a href="https://github.com/alibaba/IOC-golang/blob/master/example/helloworld/zz_generated.ioc.go#L21"> example/helloworld/zz_generated.ioc.go#L21&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">singleton&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RegisterStructDescriptor&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">autowire&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">StructDescriptor&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Factory&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">App&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>结构如何被使用&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过标签注入&lt;/p>
&lt;p>开发人员需要通过标签来标记需要注入的结构字段。&lt;/p>
&lt;p>需要通过标签注入依赖至字段的结构，其本身必须也注册在框架上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// +ioc:autowire=true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// +ioc:autowire:type=singleton
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">App&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MySubService&lt;/span> &lt;span style="color:#000">Service&lt;/span> &lt;span style="color:#4e9a06">`singleton:&amp;#34;main.ServiceImpl1&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过 API 可获取对象，入参为 &lt;a href="/docs/concept/ioc/sd/#%E7%BB%93%E6%9E%84%E6%8F%8F%E8%BF%B0id">结构 ID (结构描述 ID，SDID)&lt;/a> 和构造参数(如需要)。&lt;/p>
&lt;p>通过 API 获取对象的过程会默认通过代码生成。参考 &lt;a href="https://github.com/alibaba/IOC-golang/blob/master/example/helloworld/zz_generated.ioc.go#L190">example/helloworld/zz_generated.ioc.go#L190&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">appInterface&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">singleton&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;main.App&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">app&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">appInterface&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">App&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">redisInterface&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">normal&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;github.com/alibaba/ioc-golang/extension/normal/redis.Impl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;localhost:6379&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">redisClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">redisInterface&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Impl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 自动装载模型</title><link>/docs/concept/ioc/autowire/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>/docs/concept/ioc/autowire/</guid><description>
&lt;h3 id="概念">概念&lt;/h3>
&lt;p>&lt;strong>自动装载(Autowire)模型&lt;/strong> 封装了一类对象的装载方式，是本框架对装载过程抽象出的概念和接口。&lt;/p>
&lt;p>用户需要定义的结构千变万化，如果每个结构描述符都要提供完整的装载过程信息，将是一件很麻烦的事情。我们将一类相似的结构抽象出一个 &lt;strong>自动装载模型&lt;/strong>，选择注册在该模型的所有结构都需要遵循该模型的加载策略，这大大降低了用户需要提供的 &lt;a href="../sd">结构描述符&lt;/a> 内的定制化信息量，从而提高开发效率。&lt;/p>
&lt;p>框架内置了两个基础自动装载模型：&lt;a href="https://github.com/alibaba/IOC-golang/tree/master/autowire/singleton">单例模型（singleton）&lt;/a>，&lt;a href="https://github.com/alibaba/IOC-golang/tree/master/autowire/normal">多例模型（normal）&lt;/a>&lt;/p>
&lt;p>当前版本中，框架内置了三个&lt;a href="https://github.com/alibaba/IOC-golang/tree/master/extension#%E5%9F%BA%E4%BA%8E-%E8%87%AA%E5%8A%A8%E8%A3%85%E8%BD%BD%E6%A8%A1%E5%9E%8B-%E5%92%8C-aop-%E8%83%BD%E5%8A%9B%E7%9A%84%E6%89%A9%E5%B1%95">扩展的自动装载模型&lt;/a>：配置（config），gRPC 客户端（grpc），RPC（rpc）。其中配置模型是多例模型的扩展，gRPC 客户端是单例模型的扩展，RPC 模型提供了（rpc-client 和 rpc-server）两侧的自动装载模型。关于这三个自动装载模型的应用，可以参考&lt;a href="https://github.com/alibaba/IOC-golang/tree/master/example/autowire">example/autowire&lt;/a> &lt;a href="https://github.com/alibaba/IOC-golang/tree/master/example/third_party/autowire/grpc">example/third_party/grpc&lt;/a> 中给出的例子。&lt;/p>
&lt;p>基于这些自动装载模型，框架内置了基于“扩展自动装载模型”的多个结构。例如，用户可以用几行代码将 “gRPC 客户端存根”注册在 “grpc 装载模型” 之上&lt;a href="/docs/examples/autowire/grpc">【示例】&lt;/a>，再例如可以方便地从配置文件中的 &lt;a href="/docs/reference/yaml_structure/">指定位置读入&lt;/a> 数据。&lt;/p></description></item><item><title>Docs: 结构描述符</title><link>/docs/concept/ioc/sd/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>/docs/concept/ioc/sd/</guid><description>
&lt;h3 id="概念">概念&lt;/h3>
&lt;p>&lt;strong>结构描述符(Struct Descriptor, SD)&lt;/strong> 用于描述一个被开发者定义的结构，包含对象生命周期的全部信息，例如结构类型是什么，依赖哪些参数，如何被构造等等信息。&lt;/p>
&lt;p>SD可以通过 &lt;a href="/docs/concept/ioc/annotation">注解&lt;/a> 的方式使用工具 &lt;a href="/docs/reference/iocli/#%E7%BB%93%E6%9E%84%E6%B3%A8%E8%A7%A3%E4%B8%8Esdcndocsconceptsd%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">自动生成&lt;/a> 。但还是推荐开发人员了解本框架定义的结构生命周期和结构描述信息，以便更清晰地了解加载过程。&lt;/p>
&lt;h3 id="对象生命周期">对象生命周期&lt;/h3>
&lt;p>开发人员在 Go 语言开发过程中需要时时关注对象的生命周期，一个常见的对象生命周期如下：&lt;/p>
&lt;ol>
&lt;li>对象定义：开发人员编码，编写结构，实现接口，确定模型（单例、多例..) 。&lt;/li>
&lt;li>加载全部依赖：依赖的下游对象创建、配置读入等。&lt;/li>
&lt;li>对象创建：产生一个基于该对象的指针&lt;/li>
&lt;li>对象构造：获取全部依赖，并将其组装到空对象中，产生可用对象。&lt;/li>
&lt;li>对象使用：调用对象的方法，读写对象字段。&lt;/li>
&lt;li>对象销毁：销毁对象，销毁无需再使用的依赖对象。&lt;/li>
&lt;/ol>
&lt;h3 id="参数">参数&lt;/h3>
&lt;p>本框架的“参数”概念，是一个结构体，该结构体包含了创建一个对象所需全部依赖，并提供了构造方法。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Config&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Host&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Port&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Username&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Password&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mysqlImpl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Impl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Impl&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mysqlImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">gorm&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">mysql&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">getMysqlLinkStr&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)),&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">gorm&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mysqlImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tableName&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TableName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">mysqlImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Config 结构即为 Impl 结构的“参数”。其包含了产生 Impl 结构的全部信息。&lt;/p>
&lt;h3 id="结构描述符-struct-descriptor">结构描述符 （Struct Descriptor）&lt;/h3>
&lt;p>定义的结构描述符如下：摘自 &lt;a href="https://github.com/alibaba/IOC-golang/blob/master/autowire/model.go#L86">autowire/model.go&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">StructDescriptor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Factory&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// raw struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ParamFactory&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ParamLoader&lt;/span> &lt;span style="color:#000">ParamLoader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ConstructFunc&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">impl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#000">param&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">DestroyFunc&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">impl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Alias&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// alias of SDID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">TransactionMethodsMap&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// transaction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impledStructPtr&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// impledStructPtr is only used to get name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Factory【必要】&lt;/p>
&lt;p>结构的工厂函数，返回值是未经初始化的空结构指针，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">App&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>ParamFactory【非必要】&lt;/p>
&lt;p>参数的工厂函数，返回值是未经初始化的空参数指针，例如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>ParamLoader【非必要】&lt;/p>
&lt;p>参数加载器定义了参数的各个字段如何被加载，是从注入标签传入、还是从配置读入、或是以一些定制化的方式。&lt;/p>
&lt;p>框架提供了默认的参数加载器，详情参阅 &lt;a href="/cn/docs/concept/param_loader">参数加载器概念&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Constructor【非必要】&lt;/p>
&lt;p>构造函数定义了对象被组装的过程。&lt;/p>
&lt;p>入参为对象指针和参数指针，其中对象指针的所有依赖标签&lt;strong>都已被注入下游对象&lt;/strong>，可以在构造函数中调用下游对象。参数指针的所有字段&lt;strong>都已经按照参数加载器的要求加载好&lt;/strong>。构造函数只负责拼装。&lt;/p>
&lt;p>返回值为经过拼装后的指针。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#000">p&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">param&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">impl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Impl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">param&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">impl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>DestroyFunc 【非必要】&lt;/p>
&lt;p>定义了对象的销毁过程，入参为对象指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Alias 【非必要】&lt;/p>
&lt;p>由于 &lt;a href="/docs/concept/ioc/sd/#%E7%BB%93%E6%9E%84id">结构ID&lt;/a> 一般较长，可以在这里指定结构的别名，可以通过这一别名替换 &lt;a href="3/docs/concept/ioc/sd/#%E7%BB%93%E6%9E%84id">结构ID&lt;/a>，调用 &lt;a href="/docs/examples/di/api/">对象获取 API&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TransactionMethodsMap 【非必要】&lt;/p>
&lt;p>基于 Saga 模型的事务函数声明， 这一 Map 的 Key 为需要使用事务能力的方法名，Value 为该方法的回滚函数，如果 Value 为空，则无回滚逻辑。参考事务例子 &lt;a href="https://github.com/alibaba/IOC-golang/tree/master/example/aop/transaction">example/transaction&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="结构id">结构ID&lt;/h3>
&lt;ul>
&lt;li>定义&lt;/li>
&lt;/ul>
&lt;p>结构(描述) ID定义为：&amp;quot;${包名}.${结构名}&amp;quot;&lt;/p>
&lt;p>结构(描述) ID （Struct Description Identification) 在本文档和项目中多处被缩写为 SDID。&lt;/p>
&lt;p>SDID 是唯一的，用于索引结构的键，类型为字符串。&lt;/p>
&lt;ul>
&lt;li>使用&lt;/li>
&lt;/ul>
&lt;p>例如，开发人员在 &lt;a href="/docs/examples/di/api/">使用 API 获取对象&lt;/a> 时，需要针对使用的自动装载模型，传入 SDID 来定位结构，从而获取对象。&lt;/p></description></item><item><title>Docs: 参数加载器</title><link>/docs/concept/ioc/param_loader/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>/docs/concept/ioc/param_loader/</guid><description>
&lt;h3 id="概念">概念&lt;/h3>
&lt;p>&lt;strong>参数加载器&lt;/strong>描述了依赖参数如何在对象构造之前被加载，包括但不限于从配置加载、从 &lt;a href="/docs/reference/tag_format/">标签&lt;/a> 参数加载等等。&lt;/p>
&lt;p>&lt;strong>参数加载器&lt;/strong>作为 &lt;a href="../sd">SD(结构描述符)&lt;/a>的一部分，可以被结构提供方定制化，也可以使用自动装载模型提供的默认参数加载器。&lt;/p>
&lt;h3 id="默认参数加载器">默认参数加载器&lt;/h3>
&lt;p>任何 SD 内定义参数加载器均被优先执行，如果加载失败，则尝试使用默认参数加载器加载。&lt;/p>
&lt;p>默认参数加载器被两个基础自动装载模型（singleton、normal）引入。依次采用三种方式加载参数，如果三种方式均加载失败，则抛出错误。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方式1 从标签指向的对象名加载参数，参考 &lt;a href="/docs/reference/yaml_structure/">配置文件结构规范&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>Load support load struct described like:
```go
normal.RegisterStructDescriptor(&amp;amp;autowire.StructDescriptor{
Factory: func() interface{}{
return &amp;amp;Impl{}
},
ParamFactory: func() interface{}{
return &amp;amp;Config{}
},
ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
return i, nil
},
})
}
type Config struct {
Address string
Password string
DB string
}
```
with
Autowire type &amp;#39;normal&amp;#39;
StructName &amp;#39;Impl&amp;#39;
Field:
MyRedis Redis `normal:&amp;#34;github.com/alibaba/ioc-golang/extension/normal/redis.Impl, redis-1&amp;#34;`
from:
```yaml
extension:
normal:
github.com/alibaba/ioc-golang/extension/normal/redis.Impl:
redis-1:
param:
address: 127.0.0.1
password: xxx
db: 0
```
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>方式2 从标签加载参数&lt;/p>
&lt;pre tabindex="0">&lt;code>Load support load param like:
```go
type Config struct {
Address string
Password string
DB string
}
```
from field:
```go
NormalRedis normalRedis.Redis `normal:&amp;#34;github.com/alibaba/ioc-golang/extension/normal/redis.Impl,address=127.0.0.1&amp;amp;password=xxx&amp;amp;db=0&amp;#34;`
```
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>方式3 从配置加载参数，参考 &lt;a href="/cn/docs/reference/yaml_structure">配置文件结构规范&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>Load support load struct described like:
```go
normal.RegisterStructDescriptor(&amp;amp;autowire.StructDescriptor{
Factory: func() interface{}{
return &amp;amp;Impl{}
},
ParamFactory: func() interface{}{
return &amp;amp;Config{}
},
ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
return i, nil
},
})
}
type Config struct {
Address string
Password string
DB string
}
```
with
Autowire type &amp;#39;normal&amp;#39;
StructName &amp;#39;Impl&amp;#39;
from:
```yaml
autowire:
normal:
github.com/alibaba/ioc-golang/extension/normal/redis.Impl:
param:
address: 127.0.0.1
password: xxx
db: 0
```
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 注解</title><link>/docs/concept/ioc/annotation/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>/docs/concept/ioc/annotation/</guid><description>
&lt;h3 id="概念">概念&lt;/h3>
&lt;p>&lt;strong>注解(annotation)&lt;/strong> 是 Go 代码中符合特定格式的注释，一般位于结构定义之前。可被命令行工具代码扫描识别，从而获取结构信息，自动生成需要的代码。
例如 &lt;a href="/docs/getting-started/tutorial">快速开始&lt;/a> 示例中的注解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// +ioc:autowire=true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// +ioc:autowire:type=singleton
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">App&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注解在 Go 应用开发的过程中，是一种直观、清晰的结构描述方式，通过使用注解进行标注，使用工具自动生成相关代码，可减少开发人员的工作量，降低代码重复率。&lt;/p>
&lt;h3 id="注解与代码生成">注解与代码生成&lt;/h3>
&lt;p>注解与代码生成能力，是为了让开发者无需关心 &lt;a href="../sd">SD(结构描述符)&lt;/a> 的组装和注册过程。开发者只需定义好结构，正确标注注解，即可使用 &lt;a href="/docs/reference/iocli/">iocli&lt;/a> 工 具自动生成当前目录和子目录下的 SD ，从而将编写的结构交给框架管理。&lt;/p>
&lt;h3 id="iocli-工具支持的注解">iocli 工具支持的注解&lt;/h3>
&lt;p>详情参阅 &lt;a href="/docs/reference/iocli/#%E6%B3%A8%E8%A7%A3%E4%B8%8E%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">iocli #注解与代码生成&lt;/a>&lt;/p></description></item></channel></rss>